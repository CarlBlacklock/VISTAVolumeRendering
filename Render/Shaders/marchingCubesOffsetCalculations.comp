#version 430
//Calculates the offset for each marchingCubes thread based on the number of triangles that will be generated by the proceeding voxels
uniform sampler3D numberOfTrianglesMap;
layout(r32i, binding = 3) uniform iimage3D offsetOutput;

uniform ivec3 Resolution;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

void main(void){
	ivec3 readLocation = ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z);
	int numberOfTrianglesPreviouslyGenerated = 0;
	//Don't care about the number of triangles generated by current voxel so we will decrement readLocation.x
	readLocation.x -= 1;
	while(readLocation.z != -1){
		//Loop across one image
		while(readLocation.y != -1){
			//Loop across one row
			while(readLocation.x != -1){
				int temp = int(texelFetch(numberOfTrianglesMap, readLocation, 0).r);
				numberOfTrianglesPreviouslyGenerated += temp;
				readLocation.x -= 1;
			}
			//Finished reading current row
			//Move to next row down and reset readLocation.x to Resolution.x
			readLocation.y -= 1;
			readLocation.x = Resolution.x;
		}
		//Finished reading current image
		//Move to next image down and reset readLocation.y to Resolution.y
		readLocation.z -= 1;
		readLocation.y = Resolution.y;
	}
	//Now that we know how many triangles will be generated store this number in our offsetOutput texture
	imageStore(offsetOutput, ivec3(gl_GlobalInvocationID), ivec4(numberOfTrianglesPreviouslyGenerated, 0, 0, 0));
}