#version 430

uniform sampler3D TextureSampler;
layout(rgba32f, binding = 1) uniform image3D outputTexture;
uniform vec3 Resolution;
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main(void){

	//Computes the gradiants of a 3D texture using a 3x3x3 Sobel Operator
	ivec3 writeLocation = ivec3(gl_GlobalInvocationID.xyz);
	ivec3 readLocation = ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z);
	// Variable Naming convention below
	// s000	s100 s200		s001 s101 s201		s002 s102 s202
	// s010 s110 s210		s011 s111 s211		s012 s112 s212   
	// s020 s120 s220		s021 s121 s221		s022 s122 s222
	// z - 1					z					z + 1
	float s000 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(-1,1,-1)).r;
	float s001 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(-1,1,0)).r;
	float s002 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(-1,1,1)).r;
	float s010 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(-1,0,-1)).r;
	float s011 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(-1,0,0)).r;
	float s012 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(-1,0,1)).r;
	float s020 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(-1,-1,-1)).r;
	float s021 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(-1,-1,0)).r;
	float s022 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(-1,-1,1)).r;
	float s100 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(0,1,-1)).r;
	float s101 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(0,1,0)).r;
	float s102 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(0,1,1)).r;
	float s110 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(0,0,-1)).r;
	float s111 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(0,0,0)).r;
	float s112 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(0,0,1)).r;
	float s120 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(0,-1,-1)).r;
	float s121 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(0,-1,0)).r;
	float s122 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(0,-1,1)).r;
	float s200 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(1,1,-1)).r;
	float s201 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(1,1,0)).r;
	float s202 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(1,1,1)).r;
	float s210 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(1,0,-1)).r;
	float s211 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(1,0,0)).r;
	float s212 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(1,0,1)).r;
	float s220 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(1,-1,-1)).r;
	float s221 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(1,-1,0)).r;
	float s222 = texelFetchOffset(TextureSampler, readLocation, 0, ivec3(1,-1,1)).r;

	//3D Sobel filter bellow
	//					Z Direction
	//	-1	0	1		-2	0	2		-1	0	1
	//	-2	0	2		-4	0	4		-2	0	2		+x in left direction
	//	-1	0	1		-2	0	2		-1	0	1		+y in up direction
	//		Z-1				Z				Z+1
	//
	//					Y DIRECTION
	//	1	2	1		2	4	2		1	2	1
	//	0	0	0		0	0	0		0	0	0		+z in right direction	
	//	-1	-2	-1		-2	-4	-2		-1	-2	-1		+x in down direction
	//		Y-1				Y				Y+1
	//
	//					X DIRECTION
	//	1	2	1		0	0	0		-1	-2	-1
	//	2	4	2		0	0	0		-2	-4	-2		+z in right direction
	//	1	2	1		0	0	0		-1	-2	-1		+y in up direction
	//	h'x(:,:,-1)		h'x(:,:,0)		h'x(:,:,1)


	float dZMinusOne = -s200 + s000 - 2.0 * s210 + 2.0 * s010 - s220 + s020;
	float dZ = -2.0 * s201 - 4.0 * s211 - 2.0 * s221 + 2.0 * s001 + 4.0 * s011 + 2.0 * s021;
	float dZPlusOne = -s202 - 2.0 * s212 - s222 + s002 + 2.0 * s012 + s022;
	float dfdz = dZMinusOne + dZ + dZPlusOne;
	
	float dYPlusOne =  -s200 - 2.0 * s201 - s202 + s000 + 2.0 * s001 + s002;
	float dY = -2.0 * s210 - 4.0 * s211 - 2.0 * s212 + 2.0 * s010 + 4.0 * s011 + 2.0 * s012;
	float dYMinusOne =  -s220 - 2.0 * s221 -s222 + s020 + 2.0 * s021 + s022;
	float dfdy = dYPlusOne + dY + dYMinusOne;
	
	float dXMinusOne = s000 + 2.0 * s001 + s002 + 2.0 * s010 + 4.0 * s011 + 2.0 * s012 + s020 + 2.0 * s021 + s022;
	float dXPlusOne = -1.0 *(s200 + 2.0 * s201 + s202 + 2.0 * 210 + 4.0 * s211 + 2.0 * s212 + s220 + 2.0 * s221 + s222);
	float dfdx = dXMinusOne + dXPlusOne;
	
	imageStore(outputTexture, writeLocation, vec4(dfdx, dfdy, dfdz, 1.0f));


	

}